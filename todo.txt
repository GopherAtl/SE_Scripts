Airlock:
	Eliminate hacky hard-coded time delay on depressurizing, use IMyAirVent.GetOxygenLevel() instead. Add more indicators - lights, maybe sound too?
	For the hangar, klaxons would be nice, perhaps some spinny lights, maybe even warning timers on LCDs before locking down.

baseQueue:
	use linkedlist<> - dunno why I rolled my own in the first place?
	display something useful instead of just the tick counter?

Arm:
	- impose -90 to 90 constraint on hinges, since the api seems to do not-that....
	- allow movement commands to queue? Or at *least* interrupt, current behavior is bad
	- MoveX and MoveY? Moderate convenience but more code.
	- Generalize/improve command arg handling? Lots of repetitive boilerplate code there,  would be applicable to all systems not just Arm preset panel buttons - A, B, C, and set, 3 preset buttons, press to go to positions,	press set first then A,B,or C to save current to buttons.
	- generalize
		step 1 would be to build it by inspection from a single specified base item
		from there... dynamically calculate end position based on parts?
		add rotors at some point
		will also mean can reach positions in 3 dimensions... which is a whole thing

systems:
	inventory manager
	solar panel controls
	general atmos control
		detecting loss of pressure and sealing doors/sections, etc. Should this be a thing that runs parallel to airlocks? Or something that replaces it and takes over that functionality? The relevant edge case is embodied by the ship hangar, where there are multiple entrances to sections which would be managed by the general system.
